# -*- coding: utf-8 -*-
"""TOMATO DESICES.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/190OhOSrZKoOShg5mAhwaCftX5RU7Z2AP

# ***MAIN CODE AUTOMATED FOR GOOGLE COLAB***
"""

!pip install opendatasets
import opendatasets as od

!pip install tensorflow==2.7

from tensorflow import keras

od.download('https://www.kaggle.com/datasets/kaustubhb999/tomatoleaf')#b66b4d2196e6159ee6c21e57f1411c92

tr=keras.preprocessing.image_dataset_from_directory('/content/tomatoleaf/tomato/train',batch_size=16,image_size=(224,224))
val=keras.preprocessing.image_dataset_from_directory('/content/tomatoleaf/tomato/val',batch_size=16,image_size=(224,224))

class_names=tr.class_names

te=tr.skip(576).cache()

tr=tr.take(576).cache()
val=val.cache()

m1=keras.applications.VGG16(
    include_top=False,
    weights="imagenet",
    input_shape=(224,224,3)
)

for i in m1.layers:
  i.trainable=False

y=keras.layers.Flatten()(m1.output)
a1=keras.layers.Dense(68,activation='relu')(y)
a2=keras.layers.Dense(64,activation='relu')(a1)
a8=keras.layers.Dense(54,activation='relu')(a2)
a3=keras.layers.Dense(45,activation='relu')(a8)
a4=keras.layers.Dense(32,activation='relu')(a3)
a5=keras.layers.Dense(24,activation='relu')(a4)
a6=keras.layers.Dense(12,activation='relu')(a5)
a7=keras.layers.Dense(10,activation='softmax')(a6)

op=keras.layers.Dense(128,activation='relu')(y)
op1=keras.layers.Dense(10,activation='softmax')(op)

model=keras.Model(inputs=m1.input,outputs=a7)

model.summary()

model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])

model.fit(tr,batch_size=16,epochs=5,validation_data=val)

model.evaluate(te,batch_size=16)

model.save('/content/drive/MyDrive/PROJECTS/TOMATO DESICES')

"""# ***LOADING SAVED MODEL AND ENHANSING***"""

import tensorflow as tf

q=keras.models.load_model('/content/drive/MyDrive/PROJECTS/TOMATO DESICES/model2')

for i in q.layers:
  i.trainable=False

q.evaluate(te,batch_size=16)

p=te.take(1)

j[0].numpy()

import matplotlib.pyplot as plt
plt.figure(figsize=(16,16))
for i,j in p:
  for k,l in enumerate(i):
    plt.subplot(4,5,k+1)
    plt.imshow(l.numpy().astype(int))
    plt.title(str(j[k].numpy()))
    plt.axis('off')

s=q.predict(p)
import numpy as np
[np.argmax(i) for i in s]

class model:
  def __init__(q,path):
    from tensorflow import keras
    q.model=keras.models.load_model(path)
  def fit(q,tf_dataset):
    q.model.fit(tf_dataset)
  def predict(q,data):
    pre=q.model.predict(data)
    import numpy as np
    return [[np.argmax(i),i[np.argmax(i)]*100]for i in pre]

mod=model('/content/drive/MyDrive/PROJECTS/TOMATO DESICES/model1')

m4=tf.keras.applications.ConvNeXtXLarge(
    model_name="convnext_xlarge",
    include_top=False,
    weights="imagenet"
)

for i in m4.layers:
  i.trainable=False

m4.summary()

from tensorflow import keras

y=keras.layers.GlobalAveragePooling2D()

y=keras.layers.GlobalAveragePooling2D()(m4.output)
a1=keras.layers.Dense(68,activation='relu')(y)
a2=keras.layers.Dense(64,activation='relu')(a1)
a8=keras.layers.Dense(54,activation='relu')(a2)
a3=keras.layers.Dense(45,activation='relu')(a8)
a4=keras.layers.Dense(32,activation='relu')(a3)
a5=keras.layers.Dense(24,activation='relu')(a4)
a6=keras.layers.Dense(12,activation='relu')(a5)
a7=keras.layers.Dense(10,activation='softmax')(a6)
mod=keras.Model(inputs=m4.input,outputs=a7)

mod.summary()

mod.save('/content/drive/MyDrive/PROJECTS/TOMATO DESICES')

